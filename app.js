// Generated by CoffeeScript 1.6.3
(function() {
  var Game, Player, app, assignGuestName, compile, currentGame, currentRoom, express, games, guestNumber, io, joinRoom, namesUsed, nib, nickNames, players, rooms, server, stylus, _;

  express = require('express');

  stylus = require("stylus");

  nib = require("nib");

  app = express();

  server = require('http').createServer(app);

  server.listen(3000);

  io = require("socket.io").listen(server);

  Player = require("./models/Player");

  Game = require("./models/Game");

  _ = require("./lib/underscore-min");

  compile = function(str, path) {
    return stylus(str).set("filename", path).use(nib());
  };

  app.set('views', __dirname + '/views');

  app.set('view engine', 'jade');

  app.use(express.logger('dev'));

  app.use(stylus.middleware({
    src: __dirname + '/public',
    compile: compile
  }));

  app.use(express["static"](__dirname + '/public'));

  app.get('/', function(req, res) {
    return res.render('index', {
      title: 'Home'
    });
  });

  guestNumber = 1;

  currentRoom = {};

  currentGame = {};

  nickNames = {};

  namesUsed = [];

  rooms = [];

  players = {};

  games = {};

  io.sockets.on('connection', function(socket) {
    guestNumber = assignGuestName(socket, guestNumber, nickNames, namesUsed);
    return socket.on("room", function(room) {
      return joinRoom(socket, room);
    });
  });

  assignGuestName = function(socket, guestNumber, nickNames, namesUsed) {
    var name;
    name = "Guest" + guestNumber;
    nickNames[socket.id] = name;
    players[socket.id] = new Player(socket.id, name);
    console.log(players[socket.id] instanceof Player);
    socket.emit('nameResult', {
      success: true,
      name: name
    });
    namesUsed.push(name);
    return guestNumber + 1;
  };

  joinRoom = function(socket, room) {
    var index, user, userSocketId, usersInRoom, usersInRoomSummary, _i, _len;
    socket.join(room);
    currentRoom[socket.id] = room;
    if (games[room] == null) {
      games[room] = new Game(room);
    }
    currentGame[socket.id] = games[room];
    currentGame[socket.id].addPlayer(players[socket.id]);
    socket.emit('joinResult', {
      room: room
    });
    socket.broadcast.to(room).emit('message', {
      text: nickNames[socket.id] + ' has joined ' + room + "."
    });
    socket.broadcast.to(room).emit('player:joined', {
      players: _.map(currentGame[socket.id].players, function(player) {
        return _.omit(player, "game");
      })
    });
    usersInRoom = io.sockets.clients(room);
    if (usersInRoom.length > 1) {
      usersInRoomSummary = "Users currently in " + room + ": ";
      for (index = _i = 0, _len = usersInRoom.length; _i < _len; index = ++_i) {
        user = usersInRoom[index];
        userSocketId = user.id;
        if (userSocketId !== socket.id) {
          if (index > 0) {
            usersInRoomSummary += ", ";
          }
          usersInRoomSummary += nickNames[userSocketId];
        }
      }
    }
    usersInRoomSummary += ".";
    return socket.emit("message", {
      text: usersInRoomSummary
    });
  };

}).call(this);
