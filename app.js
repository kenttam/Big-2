// Generated by CoffeeScript 1.6.3
(function() {
  var Card, Game, Player, app, assignGuestName, compile, currentGame, express, games, guestNumber, io, joinRoom, namesUsed, nib, nickNames, players, server, stylus, _;

  express = require('express');

  stylus = require("stylus");

  nib = require("nib");

  app = express();

  server = require('http').createServer(app);

  server.listen(3000);

  io = require("socket.io").listen(server);

  Player = require("./models/Player");

  Game = require("./models/Game");

  Card = require("./models/Card");

  _ = require("./public/javascripts/lib/underscore-min");

  compile = function(str, path) {
    return stylus(str).set("filename", path).use(nib());
  };

  app.set('views', __dirname + '/views');

  app.set('view engine', 'jade');

  app.use(express.logger('dev'));

  app.use(stylus.middleware({
    src: __dirname + '/public',
    compile: compile
  }));

  app.use(express["static"](__dirname + '/public'));

  app.get('/', function(req, res) {
    return res.render('index', {
      title: 'Home'
    });
  });

  guestNumber = 1;

  currentGame = {};

  nickNames = {};

  namesUsed = [];

  players = {};

  games = {};

  io.sockets.on('connection', function(socket) {
    guestNumber = assignGuestName(socket, guestNumber, nickNames, namesUsed);
    socket.on("room", function(room) {
      return joinRoom(socket, room);
    });
    socket.on("startGame", function() {
      var currentRoom, whoseTurn, _i, _len, _ref, _results;
      whoseTurn = currentGame[socket.id].start();
      currentRoom = currentGame[socket.id].room;
      io.sockets["in"](currentRoom).emit("update:turn", whoseTurn);
      _ref = io.sockets.clients(currentRoom);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        socket = _ref[_i];
        _results.push(socket.emit("hand", players[socket.id].hand));
      }
      return _results;
    });
    socket.on("startTestGame", function() {
      games["test"] = null;
      joinRoom(socket, "test");
      currentGame[socket.id].addPlayer(new Player(1, "test2"));
      currentGame[socket.id].addPlayer(new Player(1, "test3"));
      currentGame[socket.id].addPlayer(new Player(1, "test4"));
      currentGame[socket.id].start();
      currentGame[socket.id].whoseTurn = 0;
      currentGame[socket.id].players[0].hand[0] = new Card(3, "Diamond");
      return socket.emit("hand", players[socket.id].hand);
    });
    socket.on("play:cards", function(data) {
      var cards, currentPlayers;
      cards = _.map(data, function(card) {
        return new Card(card.rank, card.suit);
      });
      currentGame[socket.id].processTurn(socket.id, cards);
      socket.emit("hand", players[socket.id].hand);
      currentPlayers = _.map(currentGame[socket.id].players, function(player) {
        return _.omit(player, ["game", "hand"]);
      });
      return io.sockets["in"](currentGame[socket.id].room).emit("update:game", {
        center: currentGame[socket.id].cardsInCenter,
        players: currentPlayers,
        whoseTurn: currentGame[socket.id].whoseTurn
      });
    });
    return socket.on("pass", function() {
      var currentPlayers;
      currentGame[socket.id].playerPassed(socket.id);
      currentPlayers = _.map(currentGame[socket.id].players, function(player) {
        return _.omit(player, ["game", "hand"]);
      });
      return io.sockets["in"](currentGame[socket.id].room).emit("update:game", {
        center: currentGame[socket.id].cardsInCenter,
        players: currentPlayers,
        whoseTurn: currentGame[socket.id].whoseTurn
      });
    });
  });

  assignGuestName = function(socket, guestNumber, nickNames, namesUsed) {
    var name;
    name = "Guest" + guestNumber;
    nickNames[socket.id] = name;
    players[socket.id] = new Player(socket.id, name);
    socket.emit('nameResult', {
      success: true,
      name: name
    });
    namesUsed.push(name);
    return guestNumber + 1;
  };

  joinRoom = function(socket, room) {
    var playerIndex;
    socket.join(room);
    if (games[room] == null) {
      games[room] = new Game(room);
    }
    currentGame[socket.id] = games[room];
    playerIndex = currentGame[socket.id].addPlayer(players[socket.id]);
    socket.emit("joined:game", {
      room: room,
      playerIndex: playerIndex
    });
    return io.sockets["in"](room).emit('players:updated', {
      players: _.map(currentGame[socket.id].players, function(player) {
        return _.omit(player, ["game", "hand"]);
      })
    });
  };

}).call(this);
