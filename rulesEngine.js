// Generated by CoffeeScript 1.6.3
(function() {
  var RulesEngine, _;

  _ = require("./lib/underscore-min");

  RulesEngine = (function() {
    function RulesEngine() {}

    RulesEngine.prototype.checkIfMoveIsValid = function(cards, cardsInCenter) {
      if (cardsInCenter.length === 0) {
        return this.validMove(cards);
      } else if (this.isSingle(cardsInCenter)) {
        if (this.isSingle(cards)) {
          return this.validSingleMove(cards, cardsInCenter);
        } else {
          return false;
        }
      } else if (this.isPair(cardsInCenter)) {
        if (this.isPair(cards)) {
          return validPairPlay(cards, cardsInCenter);
        }
      }
    };

    RulesEngine.prototype.validSinglePlay = function(cards, cardsInCenter) {
      if (cards[0].numericalRank() > cardsInCenter[0].numericalRank()) {
        return true;
      } else if (cards[0].numericalRank() === cardsInCenter[0].numericalRank()) {
        return cards[0].suitRank() > cardsInCenter[0].suitRank();
      } else {
        return false;
      }
    };

    RulesEngine.prototype.validPairPlay = function(cards, cardsInCenter) {
      var sortedCards, sortedCenter;
      if (cards[0].numericalRank() > cardsInCenter[0].numericalRank()) {
        return true;
      } else if (cards[0].numericalRank() === cardsInCenter[0].numericalRank()) {
        sortedCards = this.sortBySuitRank(cards);
        sortedCenter = this.sortBySuitRank(cardsInCenter);
        return sortedCards[1].suitRank() > sortedCenter[1].suitRank();
      } else {
        return false;
      }
    };

    RulesEngine.prototype.validFiveCardsPlay = function(cards, cardsInCenter) {
      if (this.isStraightFlush(cardsInCenter)) {
        if (this.isStraightFlush(cards)) {
          return this.compareStraightFlush(cards, cardsInCenter);
        } else {
          return false;
        }
      } else if (this.isFourOfAKind(cardsInCenter)) {
        if (this.isStraightFlush(cards)) {
          return true;
        } else if (this.isFourOfAKind(cards)) {
          return this.compareFourOfAKind(cards, cardsInCenter);
        }
      }
    };

    RulesEngine.prototype.compareStraightFlush = function(cards, center) {
      var sortedCards, sortedCenter;
      sortedCards = this.sortByNumericalRank(cards);
      sortedCenter = this.sortBySuitRank(center);
      if (sortedCards[4].numericalRank() > sortedCenter[4].numericalRank()) {
        return true;
      } else if (sortedCards[4].numericalRank() === sortedCenter[4].numericalRank()) {
        if (sortedCards[4].suitRank() > sortedCenter[4].suitRank()) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    };

    RulesEngine.prototype.compareFourOfAKind = function(cards, center) {
      return this.getFourOfAKindRank(cards) > this.getFourOfAKindRank(center);
    };

    RulesEngine.prototype.getFourOfAKindRank = function(cards) {
      if (cards[0].rank === cards[1].rank) {
        return cards[0].numericalRank();
      } else if (cards[0] === cards[2].rank) {
        return cards[0].numericalRank();
      } else {
        return cards[1].numericalRank();
      }
    };

    RulesEngine.prototype.compareFullHouse = function(cards, center) {
      return this.getFullHouseRank(cards) > this.getFullHouseRank(center);
    };

    RulesEngine.prototype.compareFlush = function(cards, center) {
      var sortedCards, sortedCenter;
      if (cards[0].suitRank() > center[0].suitRank()) {
        return true;
      } else if (cards[0].suitRank() === center[0].suitRank()) {
        sortedCards = this.sortByNumericalRank(cards);
        sortedCenter = this.sortByNumericalRank(center);
        return sortedCards[4].numericalRank() > sortedCenter[4].numericalRank();
      } else {
        return false;
      }
    };

    RulesEngine.prototype.getFullHouseRank = function(cards) {
      var sortedCards, _ref;
      sortedCards = this.sortByNumericalRank(cards);
      if ((sortedCards[0].rank === (_ref = sortedCards[1].rank) && _ref === sortedCards[2])) {
        return sortedCards[0].numericalRank();
      } else {
        return sortedCards[4].numericalRank();
      }
    };

    RulesEngine.prototype.validHand = function(cards) {
      return this.isSingle(cards || this.isPair(cards || this.validFiveCardMove(cards)));
    };

    RulesEngine.prototype.validFiveCardHand = function(cards) {
      return this.isStraight(cards || this.isFlush(cards || this.isFullHouse(cards || this.isFourOfAKind)));
    };

    RulesEngine.prototype.isSingle = function(cards) {
      return cards.length === 1;
    };

    RulesEngine.prototype.isPair = function(cards) {
      return cards.length === 2 && cards[0].rank === cards[1].rank;
    };

    RulesEngine.prototype.isStraight = function(cards) {
      var sortedCards, x, _i;
      sortedCards = this.sortByNumericalRank(cards);
      for (x = _i = 0; _i < 4; x = ++_i) {
        if (sortedCards[x].numericalRank() + 1 !== sortedCards[x + 1].numericalRank()) {
          return false;
        }
      }
      return true;
    };

    RulesEngine.prototype.isFlush = function(cards) {
      var _ref, _ref1, _ref2;
      if ((((cards[0].suit === (_ref2 = cards[1].suit) && _ref2 === (_ref1 = cards[2].suit)) && _ref1 === (_ref = cards[3].suit)) && _ref === cards[4].suit)) {
        return true;
      } else {
        return false;
      }
    };

    RulesEngine.prototype.isFullHouse = function(cards) {
      var sortedCards, _ref, _ref1;
      sortedCards = this.sortByNumericalRank(cards);
      if ((sortedCards[0].numericalRank() === (_ref = sortedCards[1].numericalRank()) && _ref === sortedCards[2].numericalRank()) && sortedCards[3].numericalRank() === sortedCards[4].numericalRank()) {
        return true;
      }
      if (sortedCards[0].numericalRank() === sortedCards[1].numericalRank() && (sortedCards[2].numericalRank() === (_ref1 = sortedCards[3].numericalRank()) && _ref1 === sortedCards[4].numericalRank())) {
        return true;
      }
      return false;
    };

    RulesEngine.prototype.isFourOfAKind = function(cards) {
      var sortedCards, _ref, _ref1, _ref2, _ref3;
      sortedCards = this.sortByNumericalRank(cards);
      if (((sortedCards[0].numericalRank() === (_ref1 = sortedCards[1].numericalRank()) && _ref1 === (_ref = sortedCards[2].numericalRank())) && _ref === sortedCards[3].numericalRank()) || ((sortedCards[1].numericalRank() === (_ref3 = sortedCards[1].numericalRank()) && _ref3 === (_ref2 = sortedCards[2].numericalRank())) && _ref2 === sortedCards[3].numericalRank())) {
        return true;
      } else {
        return false;
      }
    };

    RulesEngine.prototype.isStraightFlush = function(cards) {
      return this.isStraight(cards) && this.isFlush(cards);
    };

    RulesEngine.prototype.sortByNumericalRank = function(cards) {
      return _.sortBy(cards, function(card) {
        return card.numericalRank();
      });
    };

    RulesEngine.prototype.sortBySuitRank = function(cards) {
      return _.sortBy(cards, function(card) {
        return card.suitRank();
      });
    };

    return RulesEngine;

  })();

  module.exports = RulesEngine;

}).call(this);
