// Generated by CoffeeScript 1.6.3
(function() {
  var Card, Deck, Game, Player, RulesEngine, _;

  _ = require("../public/javascripts/lib/underscore-min");

  Card = require("./card");

  Deck = require("./deck");

  Player = require("./player");

  RulesEngine = require("./rulesEngine");

  Game = (function() {
    function Game(name) {
      this.name = name;
      this.deck = new Deck();
      this.players = [];
      this.rulesEngine = new RulesEngine();
      this.playersPassed = 0;
      this.cardsInCenter = [];
      this.history = [];
      this.gameOver = false;
    }

    Game.prototype.addPlayer = function(player) {
      if (this.players.length < 4 && player.constructor.name === "Player") {
        this.players.push(player);
        player.game = this;
        return this.players.length - 1;
      } else {
        return false;
      }
    };

    Game.prototype.start = function() {
      if (this.players.length === 4) {
        this.deck.shuffle();
        this.passOutCards();
        this.whoseTurn = this.findPlayerIndexWithDiamondThree();
        this.gameOver = false;
        return this.whoseTurn;
      } else {
        return false;
      }
    };

    Game.prototype.passOutCards = function() {
      this.players[0].hand = this.deck.cards.slice(0, 13).sort(this.rulesEngine.compareSingleCard);
      this.players[1].hand = this.deck.cards.slice(13, 26).sort(this.rulesEngine.compareSingleCard);
      this.players[2].hand = this.deck.cards.slice(26, 39).sort(this.rulesEngine.compareSingleCard);
      return this.players[3].hand = this.deck.cards.slice(39, 52).sort(this.rulesEngine.compareSingleCard);
    };

    Game.prototype.findPlayerIndexWithDiamondThree = function() {
      var diamondThree, playerNumber;
      diamondThree = new Card(3, "Diamond");
      playerNumber = null;
      _.each(this.players, function(player, currentPlayerNumber) {
        return _.each(player.hand, function(card) {
          if (_.isEqual(card, diamondThree)) {
            return playerNumber = currentPlayerNumber;
          }
        });
      });
      return playerNumber;
    };

    Game.prototype.processTurn = function(id, cards) {
      var diamondThree;
      if (this.history.length === 0) {
        diamondThree = _.find(cards, function(card) {
          return card.equal(new Card(3, "Diamond"));
        });
        if (diamondThree != null) {
          if (this.rulesEngine.checkIfMoveIsValid(cards, this.cardsInCenter) && this.currentPlayerHasCards(cards)) {
            this.endTurn(cards);
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }
      if (this.players[this.whoseTurn].id === id) {
        if (this.rulesEngine.checkIfMoveIsValid(cards, this.cardsInCenter) && this.currentPlayerHasCards(cards)) {
          this.endTurn(cards);
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    };

    Game.prototype.playerPassed = function(id) {
      if (this.players[this.whoseTurn].id === id && this.playersPassed < 3) {
        this.players[this.whoseTurn].passed = true;
        this.endTurn();
        return true;
      } else {
        return false;
      }
    };

    Game.prototype.endTurn = function(cards) {
      if (cards != null) {
        this.history.push(cards);
        this.cardsInCenter = cards;
        this.playersPassed = 0;
        _.each(this.players, function(player) {
          return player.passed = false;
        });
        this.removeCardFromPlayersHand(cards);
      } else {
        this.playersPassed += 1;
        if (this.playersPassed === 3) {
          this.cardsInCenter = [];
        }
      }
      this.players[this.whoseTurn].lastPlayed = cards;
      if (this.players[this.whoseTurn].hand.length === 0) {
        this.gameOver = true;
        return;
      }
      this.whoseTurn += 1;
      if (this.whoseTurn === 4) {
        return this.whoseTurn = 0;
      }
    };

    Game.prototype.currentPlayerHasCards = function(cards) {
      var card, found, _i, _len;
      for (_i = 0, _len = cards.length; _i < _len; _i++) {
        card = cards[_i];
        found = _.find(this.players[this.whoseTurn].hand, function(cardInHand) {
          return cardInHand.equal(card);
        });
        if (found == null) {
          return false;
        }
      }
      return true;
    };

    Game.prototype.removeCardFromPlayersHand = function(cardsToRemove) {
      return this.players[this.whoseTurn].hand = _.reject(this.players[this.whoseTurn].hand, function(cardInHand) {
        var found;
        found = _.find(cardsToRemove, function(cardToRemove) {
          return cardInHand.equal(cardToRemove);
        });
        if (found == null) {
          return false;
        }
        return true;
      });
    };

    return Game;

  })();

  module.exports = Game;

}).call(this);
