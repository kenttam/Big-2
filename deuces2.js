// Generated by CoffeeScript 1.6.3
(function() {
  var Card, Deck, Game, Player, Ranks, RulesEngine, Suits, _,
    __hasProp = {}.hasOwnProperty;

  _ = require("./lib/underscore-min");

  Card = require("./card");

  Ranks = {
    0: 3,
    1: 4,
    2: 5,
    3: 6,
    4: 7,
    5: 8,
    6: 9,
    7: 10,
    8: "J",
    9: "Q",
    10: "K",
    11: "A",
    12: 2
  };

  Suits = {
    0: "Diamond",
    1: "Club",
    2: "Hearts",
    3: "Spade"
  };

  Game = (function() {
    function Game() {
      this.deck = new Deck();
      this.players = [];
      this.rulesEngine = new RulesEngine();
      this.playersPassed = 0;
      this.cardsInCenter = [];
    }

    Game.prototype.addPlayer = function(player) {
      if (player instanceof Player && this.players.length < 4) {
        this.players.push(player);
        return player.game = this;
      }
    };

    Game.prototype.start = function() {
      if (this.players.length === 4) {
        this.deck.shuffle();
        this.passOutCards();
        return this.whoseTurn = this.findPlayerIndexWithDiamondThree();
      }
    };

    Game.prototype.passOutCards = function() {
      this.players[0].hand = this.deck.cards.slice(0, 13);
      this.players[1].hand = this.deck.cards.slice(13, 26);
      this.players[2].hand = this.deck.cards.slice(26, 39);
      return this.players[3].hand = this.deck.cards.slice(39, 52);
    };

    Game.prototype.findPlayerIndexWithDiamondThree = function() {
      var diamondThree, playerNumber;
      diamondThree = new Card(3, "Diamond");
      playerNumber = null;
      _.each(this.players, function(player, currentPlayerNumber) {
        return _.each(player.hand, function(card) {
          if (_.isEqual(card, diamondThree)) {
            return playerNumber = currentPlayerNumber;
          }
        });
      });
      return playerNumber;
    };

    Game.prototype.processTurn = function(id, cards) {
      var result;
      if (this.players[this.whoseTurn].id === id) {
        return result = this.rulesEngine.checkIfMoveIsValid(cards);
      }
    };

    return Game;

  })();

  RulesEngine = (function() {
    function RulesEngine() {}

    RulesEngine.prototype.checkIfMoveIsValid = function(cards) {
      /*
      if @playersPassed == 3 || @cardsInCenter.length == 0
        
      else
      */

    };

    RulesEngine.prototype.isSingle = function(cards) {
      return cards.length === 1;
    };

    RulesEngine.prototype.isPair = function(cards) {
      return cards.length === 2 && cards[0].rank === cards[1].rank;
    };

    RulesEngine.prototype.isStraight = function(cards) {
      var sortedCards, x, _i;
      sortedCards = _.sortBy(cards, function(card) {
        return card.numericalRank();
      });
      for (x = _i = 0; _i < 4; x = ++_i) {
        if (sortedCards[x].numericalRank() + 1 !== sortedCards[x + 1].numericalRank()) {
          return false;
        }
      }
      return true;
    };

    return RulesEngine;

  })();

  Deck = (function() {
    function Deck() {
      var rank, rank_num, suit, suit_num;
      this.cards = [];
      for (rank_num in Ranks) {
        if (!__hasProp.call(Ranks, rank_num)) continue;
        rank = Ranks[rank_num];
        for (suit_num in Suits) {
          if (!__hasProp.call(Suits, suit_num)) continue;
          suit = Suits[suit_num];
          this.cards.push(new Card(rank, suit));
        }
      }
    }

    Deck.prototype.shuffle = function() {
      return this.cards = _.shuffle(this.cards);
    };

    return Deck;

  })();

  Player = (function() {
    function Player() {
      this.hand = [];
      this.game = null;
      this.id = Math.floor(Math.random() * 10000000);
    }

    Player.prototype.playCards = function(cards) {
      return game.processTurn(this.id, cards);
      /*    
      class Card
        constructor: (rank, suit)->
      @rank = rank
      @suits = suit
        numericalRank: ->
      numericalRankDictionary = _.invert Ranks
      parseInt(numericalRankDictionary[@rank], 10)
      */

    };

    return Player;

  })();

  exports.Game = Game;

  exports.Player = Player;

  exports.Deck = Deck;

  exports.RulesEngine = RulesEngine;

}).call(this);
